<?php

namespace PoiBundle\Repository;

/**
 * PointsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointsRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        $query
            ->select(['Points'])
            ->from('PoiBundle:Points', 'Points');

        try {
            return $query->getQuery();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findAcceptedAndUnblockedQuery($accepted, $unblocked)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        $query
            ->select(['Points'])
            ->from('PoiBundle:Points', 'Points')
            ->where('Points.accepted = ' . ($accepted ? 'true' : 'false'))
            ->andWhere('Points.unblocked = ' . ($unblocked ? 'true' : 'false'));

        try {
            return $query->getQuery();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findByIdRestResult($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        $query
            ->select('Point')
            ->from('PoiBundle:Points', 'Point')
            ->where('Point.id = :id')
            ->setParameter('id', $id);

        try {
            return $query->getQuery()->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findByCriteriaRestResult($typeid, $locality, $limit, $offset){
        $query = $this->getEntityManager()->createQueryBuilder();

        $query
            ->select('Point')
            ->from('PoiBundle:Points', 'Point')
            ->innerJoin('Point.type', 'Type')
            ->where('Type.id = :typeid')
            ->andWhere('Point.locality LIKE :locality')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->setParameter('typeid', $typeid)
            ->setParameter('locality', $locality);

        try {
            return $query->getQuery()->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

}